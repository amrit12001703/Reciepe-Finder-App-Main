{"version":3,"sources":["RecipeBody.js","headerForm.js","App.js","serviceWorker.js","index.js"],"names":["RecipeBody","props","state","meal","console","log","this","foodItem","alert","Axios","get","then","resolve","data","meals","setState","prevProps","length","list","i","push","key","id","className","strMeal","src","strMealThumb","alt","class","strCategory","strArea","strInstructions","Component","HeaderForm","getRecipe","e","preventDefault","item","document","getElementById","value","searched","type","placeholder","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qWAiGeA,G,wDA5Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHS,E,gEAOE,IAAD,OAClBC,QAAQC,IACN,wDACEC,KAAKL,MAAMM,UAEa,KAAxBD,KAAKL,MAAMM,SAAiBC,MAAM,kBAEpCC,IAAMC,IACJ,wDACEJ,KAAKL,MAAMM,UACbI,MAAK,SAACC,GACNR,QAAQC,IAAIO,EAAQC,KAAKC,OACzB,EAAKC,SAAS,CACZZ,KAAMS,EAAQC,KAAKC,a,yCAMRE,GAAY,IAAD,OACxBV,KAAKL,MAAMM,WAAaS,EAAUT,WACR,KAAxBD,KAAKL,MAAMM,SAAiBC,MAAM,kBAEpCC,IAAMC,IACJ,wDACEJ,KAAKL,MAAMM,UACbI,MAAK,SAACC,GACNR,QAAQC,IAAIO,EAAQC,KAAKC,OACzB,EAAKC,SAAS,CACZZ,KAAMS,EAAQC,KAAKC,c,+BAOnB,IACAX,EAASG,KAAKJ,MAAdC,KACR,GAAa,OAATA,GAAiBA,EAAKc,OAAS,EAAG,CAIpC,IAHA,IAAIC,EAAO,GACPC,EAAI,EAEgC,KAAjChB,EAAK,GAAG,gBAAkBgB,IAC/BD,EAAKE,KACH,wBAAIC,IAAKF,GACNhB,EAAK,GAAG,gBAAkBgB,GAAK,OAAShB,EAAK,GAAG,aAAegB,KAGpEA,IAEFf,QAAQC,IAAIa,GAGd,IAAMI,EACK,OAATnB,GAAiBA,EAAKc,OAAS,EAC7B,yBAAKM,UAAU,mBACb,yBAAKA,UAAU,SACb,4BAAKpB,EAAK,GAAGqB,UAEf,yBAAKD,UAAU,cACb,yBACEE,IAAKtB,EAAK,GAAGuB,aACbC,IAAK,iBAAmBxB,EAAK,GAAGqB,UAElC,yBAAKI,MAAM,YACT,2BACE,iDADF,IAC8BzB,EAAK,GAAG0B,YAAa,KAEnD,2BACE,iDADF,IAC8B1B,EAAK,GAAG2B,QAAS,KAE/C,4CACA,wBAAIP,UAAU,eAAeL,GAC7B,uCACA,yBAAKK,UAAU,UAAUpB,EAAK,GAAG4B,oBAKvC,yBAAKR,UAAU,UAAf,6BAEJ,OAAO,6BAAMD,O,GAzFQU,cCiDVC,E,kDAhDb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAORiC,UAAY,SAACC,GACXA,EAAEC,iBAEF,IAAIC,EAAOC,SAASC,eAAe,QAAQC,MAE3C,EAAKzB,SAAS,CACZ0B,UAAU,EACVlC,SAAU8B,KAbZ,EAAKnC,MAAQ,CACXuC,UAAU,EACVlC,SAAU,IAJK,E,qDAoBjB,OACE,6BACE,yBAAKgB,UAAU,oBACb,wBAAIA,UAAU,WAAd,sBACA,0BAAMA,UAAU,cACd,2BACEmB,KAAK,OACLC,YAAY,6BACZrB,GAAG,SAEL,2BACEoB,KAAK,SACLF,MAAM,kBACNI,QAAStC,KAAK4B,cAInB5B,KAAKJ,MAAMuC,SACV,kBAAC,EAAD,CAAYlC,SAAUD,KAAKJ,MAAMK,WAEjC,wBAAIgB,UAAU,UAAd,uD,GAzCeS,aCQVa,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASC,eAAe,SD2H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAC6C,GAClCA,EAAaC,kB","file":"static/js/main.02633d86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport \"./css/recipe-body.css\";\n\nclass RecipeBody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meal: [],\n    };\n  }\n\n  componentDidMount() {\n    console.log(\n      \"https://www.themealdb.com/api/json/v1/1/search.php?s=\" +\n        this.props.foodItem\n    );\n    if (this.props.foodItem === \"\") alert(\"Enter a Dish!!\");\n    else {\n      Axios.get(\n        \"https://www.themealdb.com/api/json/v1/1/search.php?s=\" +\n          this.props.foodItem\n      ).then((resolve) => {\n        console.log(resolve.data.meals);\n        this.setState({\n          meal: resolve.data.meals,\n        });\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.foodItem !== prevProps.foodItem) {\n      if (this.props.foodItem === \"\") alert(\"Enter a Dish!!\");\n      else {\n        Axios.get(\n          \"https://www.themealdb.com/api/json/v1/1/search.php?s=\" +\n            this.props.foodItem\n        ).then((resolve) => {\n          console.log(resolve.data.meals);\n          this.setState({\n            meal: resolve.data.meals,\n          });\n        });\n      }\n    }\n  }\n\n  render() {\n    const { meal } = this.state;\n    if (meal !== null && meal.length > 0) {\n      var list = [];\n      let i = 1;\n\n      while (meal[0][\"strIngredient\" + i] !== \"\") {\n        list.push(\n          <li key={i}>\n            {meal[0][\"strIngredient\" + i] + \"----\" + meal[0][\"strMeasure\" + i]}\n          </li>\n        );\n        i++;\n      }\n      console.log(list);\n    }\n\n    const id =\n      meal !== null && meal.length > 0 ? (\n        <div className=\"recipeContainer\">\n          <div className=\"title\">\n            <h1>{meal[0].strMeal}</h1>\n          </div>\n          <div className=\"recipeData\">\n            <img\n              src={meal[0].strMealThumb}\n              alt={\"Your meal for \" + meal[0].strMeal}\n            />\n            <div class=\"textData\">\n              <p>\n                <em>Category of Meal:</em> {meal[0].strCategory}{\" \"}\n              </p>\n              <p>\n                <em>Area of the Meal:</em> {meal[0].strArea}{\" \"}\n              </p>\n              <h3>Ingredients:</h3>\n              <ul className=\"ingredients\">{list}</ul>\n              <h3>Recipes</h3>\n              <div className=\"recipe\">{meal[0].strInstructions}</div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"noData\">No Data has been recieved</div>\n      );\n    return <div>{id}</div>;\n  }\n}\n\nexport default RecipeBody;\n","import React, { Component } from \"react\";\nimport \"./css/header-form.css\";\nimport RecipeBody from \"./RecipeBody\";\n\nclass HeaderForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searched: false,\n      foodItem: \"\",\n    };\n  }\n\n  getRecipe = (e) => {\n    e.preventDefault();\n\n    var item = document.getElementById(\"text\").value;\n\n    this.setState({\n      searched: true,\n      foodItem: item,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"header-container\">\n          <h1 className=\"heading\">Meal Recipe Finder</h1>\n          <form className=\"input-form\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter the name of the dish\"\n              id=\"text\"\n            />\n            <input\n              type=\"submit\"\n              value=\"Get Ingredients\"\n              onClick={this.getRecipe}\n            />\n          </form>\n        </div>\n        {this.state.searched ? (\n          <RecipeBody foodItem={this.state.foodItem} />\n        ) : (\n          <h2 className=\"center\">\n            Type a Dish Name to search for its ingredients\n          </h2>\n        )}\n      </div>\n    );\n  }\n}\nexport default HeaderForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport HeaderForm from \"./headerForm\";\n\nfunction App() {\n  return (\n    <div>\n      <HeaderForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}